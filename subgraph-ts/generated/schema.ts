// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ActiveTemplate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ActiveTemplate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ActiveTemplate must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ActiveTemplate", id.toString(), this);
    }
  }

  static load(id: string): ActiveTemplate | null {
    return changetype<ActiveTemplate | null>(store.get("ActiveTemplate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get acceptedTimestamp(): string | null {
    let value = this.get("acceptedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set acceptedTimestamp(value: string | null) {
    if (!value) {
      this.unset("acceptedTimestamp");
    } else {
      this.set("acceptedTimestamp", Value.fromString(<string>value));
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value!.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }
}

export class Listing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Listing entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Listing must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Listing", id.toString(), this);
    }
  }

  static load(id: string): Listing | null {
    return changetype<Listing | null>(store.get("Listing", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): string | null {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set token(value: string | null) {
    if (!value) {
      this.unset("token");
    } else {
      this.set("token", Value.fromString(<string>value));
    }
  }

  get lister(): Bytes {
    let value = this.get("lister");
    return value!.toBytes();
  }

  set lister(value: Bytes) {
    this.set("lister", Value.fromBytes(value));
  }

  get listing_listingId(): BigInt {
    let value = this.get("listing_listingId");
    return value!.toBigInt();
  }

  set listing_listingId(value: BigInt) {
    this.set("listing_listingId", Value.fromBigInt(value));
  }

  get listing_tokenOwner(): Bytes {
    let value = this.get("listing_tokenOwner");
    return value!.toBytes();
  }

  set listing_tokenOwner(value: Bytes) {
    this.set("listing_tokenOwner", Value.fromBytes(value));
  }

  get listing_assetContract(): Bytes {
    let value = this.get("listing_assetContract");
    return value!.toBytes();
  }

  set listing_assetContract(value: Bytes) {
    this.set("listing_assetContract", Value.fromBytes(value));
  }

  get listing_tokenId(): BigInt {
    let value = this.get("listing_tokenId");
    return value!.toBigInt();
  }

  set listing_tokenId(value: BigInt) {
    this.set("listing_tokenId", Value.fromBigInt(value));
  }

  get listing_startTime(): BigInt {
    let value = this.get("listing_startTime");
    return value!.toBigInt();
  }

  set listing_startTime(value: BigInt) {
    this.set("listing_startTime", Value.fromBigInt(value));
  }

  get listing_endTime(): BigInt {
    let value = this.get("listing_endTime");
    return value!.toBigInt();
  }

  set listing_endTime(value: BigInt) {
    this.set("listing_endTime", Value.fromBigInt(value));
  }

  get listing_quantity(): BigInt {
    let value = this.get("listing_quantity");
    return value!.toBigInt();
  }

  set listing_quantity(value: BigInt) {
    this.set("listing_quantity", Value.fromBigInt(value));
  }

  get listing_currency(): Bytes {
    let value = this.get("listing_currency");
    return value!.toBytes();
  }

  set listing_currency(value: Bytes) {
    this.set("listing_currency", Value.fromBytes(value));
  }

  get listing_reservePricePerToken(): BigInt {
    let value = this.get("listing_reservePricePerToken");
    return value!.toBigInt();
  }

  set listing_reservePricePerToken(value: BigInt) {
    this.set("listing_reservePricePerToken", Value.fromBigInt(value));
  }

  get listing_buyoutPricePerToken(): BigInt {
    let value = this.get("listing_buyoutPricePerToken");
    return value!.toBigInt();
  }

  set listing_buyoutPricePerToken(value: BigInt) {
    this.set("listing_buyoutPricePerToken", Value.fromBigInt(value));
  }

  get listing_tokenType(): i32 {
    let value = this.get("listing_tokenType");
    return value!.toI32();
  }

  set listing_tokenType(value: i32) {
    this.set("listing_tokenType", Value.fromI32(value));
  }

  get listing_listingType(): i32 {
    let value = this.get("listing_listingType");
    return value!.toI32();
  }

  set listing_listingType(value: i32) {
    this.set("listing_listingType", Value.fromI32(value));
  }

  get isAccepted(): boolean {
    let value = this.get("isAccepted");
    return value!.toBoolean();
  }

  set isAccepted(value: boolean) {
    this.set("isAccepted", Value.fromBoolean(value));
  }
}

export class NewSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewSale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewSale", id.toString(), this);
    }
  }

  static load(id: string): NewSale | null {
    return changetype<NewSale | null>(store.get("NewSale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listingId(): BigInt {
    let value = this.get("listingId");
    return value!.toBigInt();
  }

  set listingId(value: BigInt) {
    this.set("listingId", Value.fromBigInt(value));
  }

  get assetContract(): Bytes {
    let value = this.get("assetContract");
    return value!.toBytes();
  }

  set assetContract(value: Bytes) {
    this.set("assetContract", Value.fromBytes(value));
  }

  get lister(): Bytes {
    let value = this.get("lister");
    return value!.toBytes();
  }

  set lister(value: Bytes) {
    this.set("lister", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get quantityBought(): BigInt {
    let value = this.get("quantityBought");
    return value!.toBigInt();
  }

  set quantityBought(value: BigInt) {
    this.set("quantityBought", Value.fromBigInt(value));
  }

  get totalPricePaid(): BigInt {
    let value = this.get("totalPricePaid");
    return value!.toBigInt();
  }

  set totalPricePaid(value: BigInt) {
    this.set("totalPricePaid", Value.fromBigInt(value));
  }
}

export class ERC1155Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC1155Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Token", id.toString(), this);
    }
  }

  static load(id: string): ERC1155Token | null {
    return changetype<ERC1155Token | null>(store.get("ERC1155Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value!.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get identifier(): BigInt {
    let value = this.get("identifier");
    return value!.toBigInt();
  }

  set identifier(value: BigInt) {
    this.set("identifier", Value.fromBigInt(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (!value) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(<string>value));
    }
  }
}

export class ERC1155Contract extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC1155Contract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC1155Contract must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC1155Contract", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ERC1155Contract | null {
    return changetype<ERC1155Contract | null>(
      store.get("ERC1155Contract", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }
}
